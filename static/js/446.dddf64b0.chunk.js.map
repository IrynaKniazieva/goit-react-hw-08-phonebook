{"version":3,"file":"static/js/446.dddf64b0.chunk.js","mappings":"qLAEaA,E,OAAeC,GAAAA,OAAH,gM,SCMzB,EANe,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,SAA6B,IAAnBC,KAAAA,OAAmB,MAAd,SAAc,EAC1C,OACI,SAACH,EAAD,CAAcG,KAAMA,EAApB,SAA2BD,GAElC,C,+GCJYE,EAAOH,EAAAA,GAAAA,KAAH,uCAGJI,EAAQJ,EAAAA,GAAAA,MAAH,2F,kBCqBlB,EAlBkB,WACd,IAAMK,GAAKC,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IAEvC,OACI,UAACJ,EAAD,YACA,UAACC,EAAD,CAAOI,QAASH,EAAhB,mBAEE,kBAAOA,GAAIA,EAAIH,KAAK,QAAQO,KAAK,QAAQC,UAAQ,EAACC,MAAM,aAAaC,YAAY,mBAEnF,UAACR,EAAD,CAAOI,QAASH,EAAhB,sBAEE,kBAAOA,GAAIA,EAAIH,KAAK,WAAWO,KAAK,WAAWC,UAAQ,EAACC,MAAM,gBAAgBC,YAAY,sBAE5F,SAACC,EAAA,EAAD,uBAGH,ECXD,EAXc,WAEZ,OACE,kBAAMC,MAAO,CAAEC,UAAW,UAA1B,WACE,kCACA,SAAC,EAAD,MAIL,C,uDCVM,IAkBIR,EAAS,eAACS,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACf,EAAIgB,GAWvD,OAREhB,IAFFgB,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/Button/Button.stuled.js","components/Button/Button.jsx","components/LoginForm/LoginForm.stuled.js","components/LoginForm/LoginForm.jsx","pages/Login/Login.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const ButtonStuled = styled.button`\npadding: 8px 16px;\n  border-radius: 4px;\n  color: black;\n  font-weight: 500;\n  cursor: pointer;\n\n  &:hover {\n    color: white;\n    background-color: orangered;}`;","import { ButtonStuled } from \"./Button.stuled\"\n\nconst Button = ({children, type=\"submit\"}) => {\n    return (\n        <ButtonStuled type={type}>{children}</ButtonStuled>\n    )\n}\n\nexport default Button;","import styled from \"styled-components\";\n\nexport const Form = styled.form`\nwidth: 320px;\n`\nexport const Label = styled.label`\ndisplay: flex;\n  flex-direction: column;\n  margin-bottom: 16px;\n`","import { nanoid } from \"nanoid\";\nimport { useMemo } from \"react\";\n\nimport { Form, Label } from \"./LoginForm.stuled\";\n\nimport Button from \"../Button/Button\"\n\n\nconst LoginForm = () => {\n    const id = useMemo(() => nanoid(), []);\n\nreturn (\n    <Form >\n    <Label htmlFor={id}>\n      Email\n      <input id={id} type=\"email\" name=\"email\" required label=\"User email\" placeholder=\"User email\" />\n    </Label>\n    <Label htmlFor={id}>\n      Password\n      <input id={id} type=\"password\" name=\"password\" required label=\"User password\" placeholder=\"User password\"/>\n    </Label>\n    <Button>Log in</Button>\n  </Form>\n)\n}\n\nexport default LoginForm;","import LoginForm from \"components/LoginForm/LoginForm\";\n\nconst Login = () => {\n\n  return (\n    <main style={{ textAlign: 'center' }}>\n      <p>login</p>\n      <LoginForm />\n    </main>\n  );\n\n};\n\nexport default Login;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["ButtonStuled","styled","children","type","Form","Label","id","useMemo","nanoid","htmlFor","name","required","label","placeholder","Button","style","textAlign","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}